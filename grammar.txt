 *** BACKUS-NAUR FORM ***

** PARSER **

<FUNCTION>             ::= [ (<PARAM_LIST>) | <IDENT> | () ] => [ <STATEMENT_BLOCK> | <STATEMENT> | <R_VAL> ]

<FUNCTION_CALL>        ::= <IDENT> () | <IDENT> ( <ARG_LIST> )

<ARG_LIST>             ::= <R_VAL> | <FUNCTION> | <R_VAL> <ARG_LIST> | <FUNCTION> <ARG_LIST>

<PARAM_LIST>           ::= <IDENT> | <DESTRUCT_ASSGN> | <IDENT> <PARAM_LIST> | <DESTRUCT_ASSGN> <PARAM_LIST>

<IDENT>                ::= <VAR>

<STATEMENT_BLOCK>      ::= { <STATEMENT_LIST> } | {}

<STATEMENT>            ::= <ASSGNMNT> | <IF> | <WHILE> | <FOR> | <DO> | <RETURN> | <INIT> | <DECL>

<ASSGNMNT>             ::= <L_VAL> = <R_VAL> | <L_VAL> = <FUNCTION>

<DESTRUCT_ASSGN>       ::= { <DESTRUCT_ASSGN_LIST> } 
 
<DESTRUCT_ASSGN_LIST>  ::= <IDENT> | <DESTRUCT_ASSGN> | <IDENT> <DESTRUCT_ASSGN_LIST> | <DESTRUCT_ASSGN> <DESTRUCT_ASSGN_LIST> 

<STATEMENT_LIST>       ::= <STATEMENT> | <STATEMENT_BLOCK> | <FUNCTION> | <STATEMENT> <STATEMENT_LIST> | <STATEMENT_BLOCK> <STATEMENT_LIST> | <FUNCTION> <STATEMENT_LIST>

<IF>                   ::= if ( <EXP> ) <STATEMENT_BLOCK> <ELIF>? | if ( <EXP> ) <STATEMENT> <ELIF>?

<ELIF>                 ::= else if ( <EXP> ) <STATEMENT_BLOCK> <ELIF>? <ELSE>? | else if ( <EXP> ) <STATEMENT> <ELIF>? <ELSE>?
                          
<ELSE>                 ::= else <STATEMENT_BLOCK> | else <STATEMENT>

<WHILE>                ::= while ( <EXP> ) <STATEMENT_BLOCK> | while ( <EXP> ) <STATEMENT>

<FOR>                  ::= for ( <INIT>  <EXP>  <EXP> ) <STATEMENT_BLOCK> | for ( <INIT>  <EXP>  <EXP> ) <STATEMENT> |
                           for ( <EXP>  <EXP>  <EXP> ) <STATEMENT_BLOCK> | for ( <EXP>  <EXP>  <EXP> ) <STATEMENT>

<DO>                   ::= do <STATEMENT_BLOCK> while ( <EXP> ) | do <STATEMENT> while ( <EXP> )

<RETURN>               ::= return <ASSGNMNT> | return <EXP> | return <FUNCTION>

<INIT>                 ::= let <IDENT> = <R_VAL> | const let <IDENT> = <R_VAL> 

<DECL>                 ::= let <IDENT>

<L_VAL>                ::= <IDENT> 

<R_VAL>                ::= <EXP> 

<EXP>                  ::= <EXP> + <EXP> | <EXP> - <EXP> | <EXP> * <EXP> | <EXP> / <EXP> | ( <EXP> ) | <TERM> | <L_VAL> = <R_VAL>

<TERM>                 ::= <NUM> | <IDENT>

                           

