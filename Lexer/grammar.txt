 *** BACKUS-NAUR FORM ***
 
** LEXER **

<CHR_L>    ::= ' ALL_ASCII_CHARACTERS '

<STR_L>    ::= "" | " ALL_ASCII_CHARACTERS+ "

<MUL>      ::= *

<DIV>      ::= /

<PLUS>     ::= +

<MIN>      ::= -

<MOD>      ::= %

<ASSGN>    ::= =

<BOR>      ::= |

<BAND>     ::= &

<BXOR>     ::= ^

<GT>       ::= >

<SAR>      ::= >>

<SHR>      ::= >>>

<LT>       ::= <

<SHL>      ::= <<

<DOT>      ::= .  

<DDOT>     ::= .. 

<ELLIP>    ::= ...   

<NOT>      ::= !       

<MULEQ>    ::= *=  

<EXP>      ::= **

<COLON>    ::= : 

<LPARAN>   ::= (  

<RPARAN>   ::= )

<LBRACK>   ::= [ 

<RBRACK>   ::= ]

<LBRACE>   ::= {

<RBRACE>   ::= }

<BNOT>     ::= ~

<DIVEQ>    ::= /=

<PE>       ::= +=

<INC>      ::= ++

<MINE>     ::= -=

<DEC>      ::= --

<MODEQ>    ::= %=

<EQ>       ::= ==

<FARROW>   ::= =>

<BOREQ>    ::= |=

<LOR>      ::= ||

<BANDEQ>   ::= &=

<LAND>     ::= &&

<BXOREQ>   ::= ^=

<GTE>      ::= >=

<SAREQ>    ::= >>=

<SHREQ>    ::= >>>= 

<LTE>      ::= <=

<SHLEQ>    ::= <<= 

<NOTEQ>    ::= !=
 
<FLOAT_L>  ::=   [0-9]+? . [0-9]+  (IF AND ONLY IF IT CAN BE REPRESENTED IN 4B [IEEE 754 single-precision binary floating-point format (32 bits)] )

<DOUBLE_L> ::=   [0-9]+? . [0-9]+  (IF AND ONLY IF IT CANNOT BE REPRESENTED IN 4B [IEEE 754 double-precision binary floating-point format (64 bits)] ) 

               | [0-9]+? . [0-9]+d 

<INT_L>    ::=   [0-9]+ | 0x[0-F]+ (IF AND ONLY IF IT CAN BE REPRESENTED IN 4B (32 bits)) 

<LONG_L>   ::=   [0-9]+ | 0x[0-F]+ (IF AND ONLY IF IT CANNOT BE REPRESENTED IN 4B (64 bits)) 

               | [0-9]+l | 0x[0-F]+l

<SINT_L>   ::=   [0-9]+s | -[0-9]+ | 0x[0-F]+s | -0x[0-F]+ (IF AND ONLY IF IT CAN BE REPRESENTED IN 4B (64 bits))

<SLONG_L>  ::=   [0-9]+s | -[0-9]+ | 0x[0-F]+s | -0x[0-F]+ (IF AND ONLY IF IT CANNOT BE REPRESENTED IN 4B (64 bits))
                
               | [0-9]+sl | -[0-9]+l | 0x[0-F]+sl | -0x[0-F]+l          

<VAR>      ::= [a-z, A-Z, _][a-z, A-Z, _, 0-9]+? AND !<RESERVED>

<RESERVED> ::= <IS>

<IS>       ::= is

<STRUCT>   ::= struct

<CLASS>    ::= class

<BOOL>     ::= bool

<CHAR>     ::= char

<SHORT>    ::= short

<INT>      ::= int

<LONG>     ::= long

<FLOAT>    ::= float

<DOUBLE>   ::= double

<SIGNED>   ::= signed

