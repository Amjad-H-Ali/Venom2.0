 *** BACKUS-NAUR FORM ***
 
** LEXER **

<CHR_L>    ::= ' ALL_ASCII_CHARACTERS '

<STR_L>    ::= "" | " ALL_ASCII_CHARACTERS+ "

<MUL>      ::= *

<DIV>      ::= /

<PLUS>     ::= +

<MIN>      ::= -

<MOD>      ::= %

<ASSGN>    ::= =

<BOR>      ::= |

<BAND>     ::= &

<BXOR>     ::= ^

<GT>       ::= >

<SAR>      ::= >>

<SHR>      ::= >>>

<LT>       ::= <

<SHL>      ::= <<

<DOT>      ::= .  

<DDOT>     ::= .. 

<ELLIP>    ::= ...   

<NOT>      ::= !       

<MULEQ>    ::= *=  

<EXP>      ::= **

<COLON>    ::= : 

<LPARAN>   ::= (  

<RPARAN>   ::= )

<LBRACK>   ::= [ 

<RBRACK>   ::= ]

<LBRACE>   ::= {

<RBRACE>   ::= }

<SEMI_COL> ::= ;

<COMMA>    ::= ,

<HASH>     ::= #

<APOST>    ::= `

<BNOT>     ::= ~

<DIVEQ>    ::= /=

<PE>       ::= +=

<INC>      ::= ++

<MINE>     ::= -=

<DEC>      ::= --

<SARROW>   ::= ->

<MODEQ>    ::= %=

<EQ>       ::= ==

<FARROW>   ::= =>

<BOREQ>    ::= |=

<LOR>      ::= ||

<BANDEQ>   ::= &=

<LAND>     ::= &&

<BXOREQ>   ::= ^=

<GTE>      ::= >=

<SAREQ>    ::= >>=

<SHREQ>    ::= >>>= 

<LTE>      ::= <=

<SHLEQ>    ::= <<= 

<NOTEQ>    ::= !=
 
<FLOAT_L>  ::=   [0-9]+? . [0-9]+f ([IEEE 754 single-precision binary floating-point format (32 bits)])

<DOUBLE_L> ::=   [0-9]+? . [0-9]+  ([IEEE 754 double-precision binary floating-point format (64 bits)]) 

<INT_L>    ::=   [0-9]+ | 0x[0-F]+ (32 bits) 

<LONG_L>   ::=   [0-9]+ | 0x[0-F]+ | [0-9]+l | 0x[0-F]+l (64 bits) 

<SINT_L>   ::=   [0-9]+s | -[0-9]+ | 0x[0-F]+s | -0x[0-F]+ (32 bits)

<SLONG_L>  ::=   [0-9]+s | -[0-9]+ | 0x[0-F]+s | -0x[0-F]+ (64 bits)
                
               | [0-9]+sl | -[0-9]+l | 0x[0-F]+sl | -0x[0-F]+l          

<VAR>      ::= [a-z, A-Z, _][a-z, A-Z, _, 0-9]+? AND !<RESERVED>

<RESERVED> ::= <IS> | <STRUCT> | <CLASS> | <BOOL> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <SIGNED> |

               <AUTO> | <BREAK> | <CASE> | <CONST> | <CONTINUE> | <DEFAULT> | <DO> | <ELSE> | <ENUM> | <FOR> | <IF> |    
               
               <RETURN> | <SIZEOF> | <STATIC> | <SWITCH> | <TYPEDEF> | <UNION> | <VOID> | <WHILE> 
               
<IS>       ::= is

<STRUCT>   ::= struct

<CLASS>    ::= class

<BOOL>     ::= bool

<CHAR>     ::= char

<SHORT>    ::= short

<INT>      ::= int

<LONG>     ::= long

<FLOAT>    ::= float

<DOUBLE>   ::= double

<SIGNED>   ::= signed

<AUTO>     ::= auto

<BREAK>    ::= break

<CASE>     ::= case

<CONST>    ::= const

<CONTINUE> ::= continue

<DEFAULT>  ::= default

<DO>       ::= do

<ELSE>     ::= else

<ENUM>     ::= enum

<FOR>      ::= for

<IF>       ::= if

<RETURN>   ::= return

<SIZEOF>   ::= sizeof

<STATIC>   ::= static

<SWITCH>   ::= switch

<TYPEDEF>  ::= typedef

<UNION>    ::= union

<VOID>     ::= void

<WHILE>    ::= while

